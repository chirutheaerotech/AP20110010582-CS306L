                                                                     REPORT                                                                NAME-CHIRANJEEVI BARIK
                                                                                                                                           ROLLNO-AP20110010582
TITLE:- SYMBOL TABLE IMPLEMENTATION


STATEMENT:-Symbol table is an important data structure created and maintained by compilers in order to store information 
about the occurrence of various entities such as variable names, function names, objects, classes, interfaces, etc. 
Symbol table is used by both the analysis and the synthesis parts of a compiler.A symbol table can be implemented in 
different ways using: Linear (sorted or unsorted) list
                      Binary Search Tree
                      Hash table
                      
PROCEDURE:- I wrote the code in c language,first of all i took a character input(EXPRESSION) and then i created two array for storing the values 
and the adress of that values in the pointer array and if the input(EXPRESSION) is alphabet then it prints identifier ,for this i am using the 
isalpha() function and if it is not i am comparing with some operators using if block, if it is a special character it will 
print the output as operator.


CODE:- #include<stdio.h>
#include<ctype.h>
#include<stdlib.h>
int main()
{
 int x=0, n, i=0,j=0,k=0;
 void *ptr,*id_address[5];
 char ch,id_Array2[15],id_Array3[15],c;
 printf("Input the expression ending with ; sign:");
 char s[20];
 scanf("%s",s);
 while(s[k]!=';')
 {
  id_Array2[i]=s[k];
  i++;
  k++;
 }
 n=i-1;
 
 printf("\n Symbol Table display\n");
 printf("Symbol \t addr \t\t\t type");
 while(j<=n)
 {
  c=id_Array2[j];
  if(isalpha(toascii(c)))
  {
   ptr=malloc(c);
   id_address[x]=ptr;
   id_Array3[x]=c;
   printf("\n%c \t %p \t identifier\n",c,ptr);
   x++;
   j++;
  }
  else
  {
   ch=c;
   if(ch=='+'||ch=='-'||ch=='*'||ch=='/' || ch=='%'|| ch=='='|| ch=='<' || ch=='>')
   {
    ptr=malloc(ch);
    id_address[x]=ptr;
    id_Array3[x]=ch;
    printf("\n %c \t %p \t operator\n",ch,ptr);
    x++;
    j++;
   }
  }
}
return 0;
}


INPUT:-  C=A+B;
OUTPUT:-  Symbol Table display
Symbol 	 addr 			 type
 C 	 0x562b28f42ac0 	 identifier

 = 	 0x562b28f42b40 	 operator

 A 	 0x562b28f42b90 	 identifier

 + 	 0x562b28f42c00 	 operator

 B 	 0x562b28f42c40 	 identifier
